https://www.hackerrank.com/challenges/chocolate-feast/problem?h_r=internal-search
#include <bits/stdc++.h>
#include<math.h>

using namespace std;

vector<string> split_string(string);

// Complete the chocolateFeast function below.
int chocolateFeast(int n, int c, int m) {
int k, count =0;
    k = n/c;
    count =k;
    while(k>=m){
        k=k-m;
        count =count+1;
        k=k+1;
    }
        
return (count);
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string ncm_temp;
        getline(cin, ncm_temp);

        vector<string> ncm = split_string(ncm_temp);

        int n = stoi(ncm[0]);

        int c = stoi(ncm[1]);

        int m = stoi(ncm[2]);

        int result = chocolateFeast(n, c, m);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

https://www.hackerrank.com/challenges/service-lane/problem
#include <bits/stdc++.h>

using namespace std;
int main()
{
    int n,t;
    cin>>n>>t;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    while(t--){
        int a,b;
        cin>>a>>b;
        int min = arr[a];
        for(int i=a+1; i<=b; i++){
            if(arr[i] < min)
                min = arr[i];
        }
        cout<<min<<endl;
    }
    return 0;
}
